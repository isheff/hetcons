{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (1.0.0-dev)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Hetcons_Participant_Client(ping,proposal_1a,phase_1b) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Hetcons_Types
import Hetcons_Participant
seqid = R.newIORef 0
ping (ip,op) = do
  send_ping op
  recv_ping ip
send_ping op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("ping", T.M_CALL, seqn)
  write_Ping_args op (Ping_args{})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_ping ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Ping_result ip
  T.readMessageEnd ip
  P.return ()
proposal_1a (ip,op) arg_proposal arg_witness = do
  send_proposal_1a op arg_proposal arg_witness
  recv_proposal_1a ip
send_proposal_1a op arg_proposal arg_witness = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("proposal_1a", T.M_CALL, seqn)
  write_Proposal_1a_args op (Proposal_1a_args{proposal_1a_args_proposal=arg_proposal,proposal_1a_args_witness=arg_witness})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_proposal_1a ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Proposal_1a_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (proposal_1a_result_no_supported_hash_sha2_descriptor_provided res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_descriptor_does_not_match_hash_sha2 res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_no_supported_hash_sha3_descriptor_provided res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_descriptor_does_not_match_hash_sha3 res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_no_supported_hash_type_descriptor_provided res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_descriptor_does_not_match_hash res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_invalid_public_crypto_key_X509 res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_invalid_public_crypto_key_PGP res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_no_supported_public_crypto_key_type_descriptor_provided res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_descriptor_does_not_match_public_crypto_key res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_descriptor_does_not_match_crypto_ID_hash res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_no_supported_crypto_ID_type_descriptor_provided res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_descriptor_does_not_match_crypto_ID res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_invalid_signed_hash res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_descriptor_does_not_match_signed_hash res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_unparsable_hashable_message res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_invalid_address res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_impossible_observer_graph res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_invalid_proposal_1a res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_invalid_Phase_1b res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_invalid_Phase_2a res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_invalid_Phase_2b res)
  P.maybe (P.return ()) X.throw (proposal_1a_result_invalid_Proof_of_Consensus res)
  P.return ()
phase_1b (ip,op) arg_phase_1b_message arg_witness = do
  send_phase_1b op arg_phase_1b_message arg_witness
  recv_phase_1b ip
send_phase_1b op arg_phase_1b_message arg_witness = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("phase_1b", T.M_CALL, seqn)
  write_Phase_1b_args op (Phase_1b_args{phase_1b_args_phase_1b_message=arg_phase_1b_message,phase_1b_args_witness=arg_witness})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_phase_1b ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Phase_1b_result ip
  T.readMessageEnd ip
  P.maybe (P.return ()) X.throw (phase_1b_result_no_supported_hash_sha2_descriptor_provided res)
  P.maybe (P.return ()) X.throw (phase_1b_result_descriptor_does_not_match_hash_sha2 res)
  P.maybe (P.return ()) X.throw (phase_1b_result_no_supported_hash_sha3_descriptor_provided res)
  P.maybe (P.return ()) X.throw (phase_1b_result_descriptor_does_not_match_hash_sha3 res)
  P.maybe (P.return ()) X.throw (phase_1b_result_no_supported_hash_type_descriptor_provided res)
  P.maybe (P.return ()) X.throw (phase_1b_result_descriptor_does_not_match_hash res)
  P.maybe (P.return ()) X.throw (phase_1b_result_invalid_public_crypto_key_X509 res)
  P.maybe (P.return ()) X.throw (phase_1b_result_invalid_public_crypto_key_PGP res)
  P.maybe (P.return ()) X.throw (phase_1b_result_no_supported_public_crypto_key_type_descriptor_provided res)
  P.maybe (P.return ()) X.throw (phase_1b_result_descriptor_does_not_match_public_crypto_key res)
  P.maybe (P.return ()) X.throw (phase_1b_result_descriptor_does_not_match_crypto_ID_hash res)
  P.maybe (P.return ()) X.throw (phase_1b_result_no_supported_crypto_ID_type_descriptor_provided res)
  P.maybe (P.return ()) X.throw (phase_1b_result_descriptor_does_not_match_crypto_ID res)
  P.maybe (P.return ()) X.throw (phase_1b_result_invalid_signed_hash res)
  P.maybe (P.return ()) X.throw (phase_1b_result_descriptor_does_not_match_signed_hash res)
  P.maybe (P.return ()) X.throw (phase_1b_result_unparsable_hashable_message res)
  P.maybe (P.return ()) X.throw (phase_1b_result_invalid_address res)
  P.maybe (P.return ()) X.throw (phase_1b_result_impossible_observer_graph res)
  P.maybe (P.return ()) X.throw (phase_1b_result_invalid_proposal_1a res)
  P.maybe (P.return ()) X.throw (phase_1b_result_invalid_Phase_1b res)
  P.maybe (P.return ()) X.throw (phase_1b_result_invalid_Phase_2a res)
  P.maybe (P.return ()) X.throw (phase_1b_result_invalid_Phase_2b res)
  P.maybe (P.return ()) X.throw (phase_1b_result_invalid_Proof_of_Consensus res)
  P.return ()
