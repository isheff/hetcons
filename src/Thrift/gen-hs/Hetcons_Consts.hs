{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (1.0.0-dev)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Hetcons_Consts where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


import Hetcons_Types
sUPPORTED_HASH_SHA2_DESCRIPTOR :: Set.HashSet I.Int8
sUPPORTED_HASH_SHA2_DESCRIPTOR = (Set.fromList [(32),(48),(64)])

sUPPORTED_HASH_SHA3_DESCRIPTOR :: Set.HashSet I.Int8
sUPPORTED_HASH_SHA3_DESCRIPTOR = (Set.fromList [(64)])

sUPPORTED_HASH_TYPE_DESCRIPTOR :: Hash_Type_Descriptor
sUPPORTED_HASH_TYPE_DESCRIPTOR = default_Hash_Type_Descriptor{hash_Type_Descriptor_sha2 = P.Just (Set.fromList [(32),(48),(64)])}

sUPPORTED_PUBLIC_CRYPTO_KEY_TYPE_DESCRIPTOR :: Public_Crypto_Key_Type_Descriptor
sUPPORTED_PUBLIC_CRYPTO_KEY_TYPE_DESCRIPTOR = default_Public_Crypto_Key_Type_Descriptor{public_Crypto_Key_Type_Descriptor_public_crypto_key_x509 = P.Just P.True}

sUPPORTED_CRYPTO_ID_HASH_TYPE_DESCRIPTOR :: Crypto_ID_Hash_Type_Descriptor
sUPPORTED_CRYPTO_ID_HASH_TYPE_DESCRIPTOR = default_Crypto_ID_Hash_Type_Descriptor{crypto_ID_Hash_Type_Descriptor_hash = default_Hash_Type_Descriptor{hash_Type_Descriptor_sha2 = P.Just (Set.fromList [(32),(48),(64)])}, crypto_ID_Hash_Type_Descriptor_public_crypto_key_type_descriptor = P.Just default_Public_Crypto_Key_Type_Descriptor{public_Crypto_Key_Type_Descriptor_public_crypto_key_x509 = P.Just P.True}}

sUPPORTED_CRYPTO_ID_TYPE_DESCRIPTOR :: Crypto_ID_Type_Descriptor
sUPPORTED_CRYPTO_ID_TYPE_DESCRIPTOR = default_Crypto_ID_Type_Descriptor{crypto_ID_Type_Descriptor_public_crypto_key = P.Just default_Public_Crypto_Key_Type_Descriptor{public_Crypto_Key_Type_Descriptor_public_crypto_key_x509 = P.Just P.True}}

sUPPORTED_SIGNED_HASH_TYPE_DESCRIPTOR :: Signed_Hash_Type_Descriptor
sUPPORTED_SIGNED_HASH_TYPE_DESCRIPTOR = default_Signed_Hash_Type_Descriptor{signed_Hash_Type_Descriptor_hash_type_descriptor = P.Just default_Hash_Type_Descriptor{hash_Type_Descriptor_sha2 = P.Just (Set.fromList [(32),(48),(64)])}, signed_Hash_Type_Descriptor_crypto_id = P.Just default_Crypto_ID_Type_Descriptor{crypto_ID_Type_Descriptor_public_crypto_key = P.Just default_Public_Crypto_Key_Type_Descriptor{public_Crypto_Key_Type_Descriptor_public_crypto_key_x509 = P.Just P.True}}}

